<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:contexy="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		">
<!--	1、使用扫描包-->
	<contexy:component-scan base-package="cn.service"/>
<!--2、使用外部配置文件-->
	<context:property-placeholder location="classpath:database.properties"/>
<!--	引入properties文件-->
	<bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
		<property name="location">
			<value>classpath:database.properties</value>
		</property>
	</bean>

	<!--		3、使用外部配置文件数据源-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="username" value="${user}"/>
		<property name="password" value="${password}"/>
		<property name="url" value="${url}"/>
		<property name="driverClassName" value="${driver}"/>
	</bean>

<!--&lt;!&ndash;		配置数据源&ndash;&gt;-->
<!--	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
<!--		<property name="username" value="root"/>-->
<!--		<property name="password" value="root"/>-->
<!--		<property name="url" value="jdbc:mysql://127.0.0.1:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8"/>-->
<!--		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
<!-- 	</bean>-->

<!-- 4、配置SqlSessionFactoryBean对象-->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="cn.pojo"/>
<!--		第二种方法中的MapperFactoryBean已经指定路径-->
<!--		<property name="mapperLocations" >-->
<!--			<list>-->
<!--				<value>-->
<!--					classpath:cn/dao/*.xml-->
<!--				</value>-->
<!--			</list>-->
<!--		</property>-->
	</bean>

<!--第一种方法-->
<!--&lt;!&ndash;配置SqlSessionTemplate的实例&ndash;&gt;-->
<!--	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
<!--		<constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>-->
<!--	</bean>-->

<!--&lt;!&ndash;配置userMapper实例&ndash;&gt;-->
<!--	<bean id="userMapper" class="cn.dao.UserMapperImpl">-->
<!--		<property name="sessionTemplate" ref="sessionTemplate"/>-->
<!--	</bean>-->

<!--&lt;!&ndash;	第二中方法实现&ndash;&gt;-->
<!--&lt;!&ndash;	使用MapperFactoryBean来为指定的接口自动创建实例&ndash;&gt;-->
<!--	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--		<property name="sqlSessionFactory" ref="sessionFactory"/>-->
<!--&lt;!&ndash;		注：mapperInterface只能是接口类型&ndash;&gt;-->
<!--		<property name="mapperInterface" value="cn.dao.UserMapper"/>-->
<!-- 	</bean>-->

<!--	&lt;!&ndash;	配置userService实例&ndash;&gt;-->
<!--	<bean id="userService" class="cn.service.UserServiceImpl">-->
<!--		<property name="userMapper" ref="userMapper"/>-->
<!--	</bean>-->


	<!--	5、第三中方法扫描的方法,和注解一起使用。-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.dao"/>
	</bean>


<!--	配置声明式的事务-->
<!--	但数据有误时，进行事务回滚，无法改变数据库的数据-->
<!--		第一步 导入命名空间  aop和tx-->

<!--	第二部 配置事务管理类-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
<!--	注解-->
	<tx:annotation-driven transaction-manager="transactionManager"/>

<!--&lt;!&ndash;	第三步 配置tx规则&ndash;&gt;-->
<!--&lt;!&ndash;	id自定义命名&ndash;&gt;-->
<!--&lt;!&ndash;	transaction-manager作用是哪个管理类 默认值是transactionManager 如果transaction-manager和默认值相同时，可以省略不写&ndash;&gt;-->
<!--	<tx:advice id="myAdvice">-->
<!--		<tx:attributes>-->
<!--			<tx:method name="find*" read-only="true"/>-->
<!--			<tx:method name="get*" read-only="true"/>-->
<!--			<tx:method name="*" read-only="true"/>-->
<!--		</tx:attributes>-->
<!--	</tx:advice>-->


<!--&lt;!&ndash;	第四部 织入&ndash;&gt;-->
<!--	<aop:config>-->
<!--&lt;!&ndash;		配置切入点&ndash;&gt;-->
<!--		<aop:pointcut id="point" expression="execution(* cn.service.*.*(..))"/>-->
<!--		<aop:advisor advice-ref="myAdvice" pointcut-ref="point"/>-->
<!-- 	</aop:config>-->
</beans>
